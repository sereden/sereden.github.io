---
layout: post
title:  "Kotlin"
date:   2017-09-22 17:40:49 +0300
categories: kotlin
---
Anko
======

{% highlight java %}
val url = "http://...."

doAsync(){
	Request(url).run()
	uiThread { longToast("Request performed") }
}
{% endhighlight %}

A nice thing about `uiThread` is that it has a different implementations depending on the caller object. If it’s used by an Activity, the uiThread code won’t be executed if `activity.isFinishing()` returns true, and it **won’t crash if the activity is no longer valid**.

You also can use your own executor:

{% highlight java %}
vall executor = Executors.newScheduledThreadPool(4)
async(executor){
// task
}
{% endhighlight %}

`doAsync` returns a java `Future`, in case you want to work with futures. And if you need it to return a future with a result, you can use doAsyncResult

copy()
====
{% highlight java %}
val f1 = Forecast(Date(), 27.5f, "Shiny day")
val f2 = f1.copy(temperature = 30f)
{% endhighlight %}


In the example, you could **still access the Date object and change its value**. The easy (and unsafe) option is to remember the rules of **not modifying the state of any object, but copying it when necessary**.

Mapping an object
====
{% highlight java %}
val f1 = Forecast(Date(), 27.5f, "Shiny day")
val (date, temperature, details) = f1
val date = f1.component1()
val temperature = f1.component2()
val details = f1.component3()
{% endhighlight %}

Companion object
====
In Kotlin, we can’t create static properties or functions, but we need to rely on objects.
If we need some **static properties, constants or functions** in a class, we can use a `companion object`. This object **will be shared among all instances of the class**, the same as a static field or method would do in Java

with()
====
It basically receives an object and an extension function as parameters, and **makes the object execute the function**. This means that all the code we define inside the brackets acts as an extension function for the object provided in the first parameter, and we can use all its public functions and properties, as well as this.
 
{% highlight java %}
/*
weekForecast.dailyForecast[position]:WeatherModel

WeahterNodel.kt:
	val date
	val description
	val high
	val low
*/

with(weekForecast.dailyForecast[position]) {
        holder.textView.text = "$date - $description - $high/$low"
}
{% endhighlight %}

Operators
====
List is here [Operator Overloading](https://kotlinlang.org/docs/reference/operator-overloading.html)

{% highlight kotlin %}
data class ForecastList(val city: String, val country: String, private val dailyForecast: List<Forecast>) {
	val size: Int
		get() = dailyForecast.size
	
	operator fun get(position: Int): Forecast = dailyForecast[position]
}
{% endhighlight %}

**Invoke example**:

{% highlight java %}
interface OnItemClickListener {
	operator fun invoke(forecast: Forecast)
}
{% endhighlight %}
And you can use both of them

{% highlight kotlin %}
itemClick.invoke(forecast)
itemClick(forecast)
{% endhighlight %}

Anonymous class
====

{% highlight java %}
forecastList.adapter = ForecastListAdapter(result, object :
	ForecastListAdapter.OnItemClickListener{
		override fun invoke(forecast: Forecast) { 
			toast(forecast.date)
		} 
	})
{% endhighlight %}

However, `setOnClickListener` in Kotlin looks like
```
fun setOnClickListener(listener: (View) -> Unit)
```
So we could use this construction:
```
view.setOnClickListener({ view -> toast("Click")})
```
Or even get rid of the left part

```
view.setOnClickListener({ toast("Click") })
```

If the **last argument of a function is also a function**, we can move it out of the parentheses:
```
view.setOnClickListener() { toast("Click") }
```

And, finally, if the **function is the only parameter**, we can get rid of the parentheses
```
view.setOnClickListener { toast("Click") }
```

# Delegates


## Lazy

It takes a lambda that is executed the first time getValue is called, so the **initialisation of the property is delayed** up to that moment.

{% highlight java %}
class App : Application() {
	val database: SQLiteOpenHelper by lazy {
		MyDatabaseHelper(applicationContext)
	} 
	
	override fun onCreate() { 
		super.onCreate()
		val db = database.writableDatabase
	}
}
{% endhighlight %}


## Observable

Execute the declared lambda expression every time the set function is called



{% highlight java %}
class ViewModel(val db: MyDatabase) {

var myProperty by Delegates.observable("") { _, _, new ->
	db.saveChanges(this, new)
}
{% endhighlight %}


## Vetoable
This is a special kind of observable that lets you decide **whether the value must be saved or not**. 
{% highlight java %}
var positiveNumber = Delegates.vetoable(0) { _, _, new ->
	// Notice: no return call
	new >= 0
}
{% endhighlight %}

## lateinit
Sometimes we need something else to initialize a property, but we **don’t have the required state available in the constructor, or we are even not able to access them**.

{% highlight java %}
class App : Application() { 
	companion object {
		lateinit var instance: App
	}
	
	override fun onCreate() { 
		super.onCreate() 
		instance = this
	} 	
}
{% endhighlight %}

## by map
Another way to delegate the values of a property is to get them from a map, using the **name of the property as the key of the map**

{% highlight java %}
class Configuration(map: Map<String, Any?>) { 
	val width: Int by map
	val height: Int by map
	val dp: Int by map
	val deviceName: String by map
}
{% endhighlight %}

And creation looks like:

{% highlight java %}
val conf = Configuration(mapOf( "width" to 1080,
           "height" to 720,
           "dp" to 240,
           "deviceName" to "mydevice"
))
{% endhighlight %}

## use
Executes the given block function on this resource and then closes it down correctly whether an exception is thrown or not


Aggregate operations
====
## any
Returns true if at least one element matches the given predicate
{% highlight java %}
val list = listOf(1, 2, 3, 4, 5, 6)
assertTrue(list.any { it % 2 == 0 })
assertFalse(list.any { it > 10 })
{% endhighlight %}

## all

{% highlight java %}
assertTrue(list.all { it < 10 })
assertFalse(list.all { it % 2 == 0 })
{% endhighlight %}

## count 

{% highlight java %}
assertEquals(3, list.count { it % 2 == 0 })
{% endhighlight %}

## fold

Accumulates the value starting with an initial value and applying an operation from the first to the last element in a collection
{% highlight java %}
assertEquals(25, list.fold(4) { total, next -> total + next })
{% endhighlight %}

## foldRight

Same as `fold`, but it goes from the last element to first

## forEach

```
list.forEach { println(it) }
```

## forEachIndexed

{% highlight java %}
list.forEachIndexed { index, value
	 -> println("position $index contains a $value") }
{% endhighlight %}

## max
```
assertEquals(6, list.max())

```

## maxBy

Returns the first element yielding the largest value of the given function or null if there are no elements.
```
assertEquals(1, list.maxBy { -it })

```

## minBy
```
 // The element whose negative is smaller
assertEquals(6, list.minBy { -it })
```

## none
```
// No elements are divisible by 7
assertTrue(list.none { it % 7 == 0 })
```

## reduce
Same as `fold`, but it doesn’t use an initial value.

```
assertEquals(21, list.reduce { total, next -> total + next })
```

## reduceRight

Same as `reduce`, but it goes **from the last element to first**.

#Filtering operations

## drop
Returns a list containing all elements **except first n elements**

## dropWhile
Returns a list containing all elements **except first elements that satisfy the given predicate**

```
assertEquals(listOf(3, 4, 5, 6), list.dropWhile { it < 3 })
```

## dropLastWhile
Returns a list containing all elements **except last elements that satisfy the given predicate**
```
assertEquals(listOf(1, 2, 3, 4), list.dropLastWhile { it > 4 })
```

## filter
Returns a list containing all elements matching the given predicate

## filterNot
Returns a list containing all elements **not matching the given predicate**.

## filterNotNull
Returns a list containing all elements **that are not null**

##slice

Returns a list containing elements at specified indices.
```
assertEquals(listOf(2, 4, 5), list.slice(listOf(1, 3, 4)))
```

## take

Returns a list containing first n elements
```
assertEquals(listOf(1, 2), list.take(2))
```

## takeLast
Returns a list containing **last n elements**

## takeWhile

Returns a list containing first elements satisfying the given predicate

```
assertEquals(listOf(1, 2), list.takeWhile { it < 3 })
```

# Mapping operations

## flatMap

Iterates over the elements creating a new collection for each one, and finally flattens all the collections into a unique list containing all the elements
```
assertEquals(listOf(1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7),
            list.flatMap { listOf(it, it + 1) })
```

## groupBy

Returns a map of the elements in original collection grouped by the result of given function

assertEquals(mapOf("odd" to listOf(1, 3, 5), "even" to listOf(2, 4, 6)), list.groupBy { if (it % 2 == 0) "even" else "odd" })


## map
Returns a list containing the results of applying the given transform function to each element of the original collection
```
assertEquals(listOf(2, 4, 6, 8, 10, 12), list.map { it * 2 })
```

## mapIndexed
Returns a list containing the results of applying the given transform function to each element and its index of the original collection.

```
assertEquals(listOf (0, 2, 6, 12, 20, 30), list.mapIndexed { index, it
	-> index * it })
```

## mapNotNull
Returns a list containing the results of applying the given transform function to each non-null element of the original collection

# Element operations

##contains
Returns true if the element is found in the collection

## elementAt
Returns an element at the given index or throws an `IndexOutOfBoundsException` if the index is out of bounds of this collection.

## elementAtOrElse
Returns an element at the given index or the result of calling the default function if the index is out of bounds of this collection

```
assertEquals(20, list.elementAtOrElse(10, { 2 * it })) 
```
## elementAtOrNull
Returns an element at the given index or `null` if the index is out of bounds of this collection.

## first
Returns the first element matching the given predicate. It will throw a `NoSuchElementException` if no elements are found.

## firstOrNull

Returns the first element matching the given predicate, or `null` if no element was found

## indexOf
Returns the first index of element, or **-1** if the collection does not contain element

## indexOfFirst
Returns index of the first element matching the given predicate, or -1 if the collection does not contain such element.

```
assertEquals(1, list.indexOfFirst { it % 2 == 0 })
```

## single
Returns the single element matching the given predicate, or **throws exception if there is no or more than one matching element**.

## singleOrNull
Returns the single element matching the given predicate, or null if element was not found or more than one element was found

# Generation operations
## merge
Returns a list of values built from elements of both collections with same indexes using the provided transform function. The list has the length of shortest collection.

{% highlight java %}
val list = listOf(1, 2, 3, 4, 5, 6)
val listRepeated = listOf(2, 2, 3, 4, 5, 5, 6)
assertEquals(listOf(3, 4, 6, 8, 10, 11), list.merge(listRepeated) { it1, it2 ->
	it1 + it2 })
{% endhighlight %}

## partition
Splits original collection into pair of collections, where the **first collection contains** elements for which the predicate returned `true`, while the **second collection contains** elements for which the predicate returned `false`

## plus

Returns a list containing all elements of the original collection and then all elements of the given collection. Because of the name of the function, we can use the ‘+’ operator with it.
```
assertEquals(listOf(1, 2, 3, 4, 5, 6, 7, 8), list + listOf(7, 8))
```

## zip
Returns a list of pairs built from the elements of both collections **with the same indexes**. The list has the length of the shortest collection.
```
assertEquals(listOf(Pair(1, 7), Pair(2, 8)), list.zip(listOf(7, 8)))
```

## unzip
Generates a Pair of Lists from a List of Pairs
```
assertEquals(Pair(listOf(5, 6), listOf(7, 8)), listOf(Pair(5, 7), Pair(6, 8)).unzip())
```

# Ordering operations

## reverse
## sort
## sortBy
Returns a list of all elements, sorted by the specified comparator
```
assertEquals(listOf(3, 7, 2, 5), unsortedList.sortBy { it % 3 })
```
## sortDescending
## sortDescendingBy


# Null safety

{% highlight java %}
val a: Int? = null
if(a!=null){
	a.toString()
}
{% endhighlight %}

This only works if a variable can’t be _concurrently modified_, because otherwise the value could have been changed from another thread and the previous check would be false at that moment. It is supported on **`val` properties or local (`val` or `var`) variables**



# When

{% highlight java %}
when (x) {
	1-> println ("1")
	2-> println ("2")
	else ->{
		print ("else")
	}
}
{% endhighlight %}

Another
{% highlight java %}
val result = when (x) { 
	0, 1 -> "binary" 
	else -> "error"
}
{% endhighlight %}


## Austocasting:

{% highlight java %}
when(view) {
	is TextView -> view.text = "I'm a TextView"
	is EditText -> toast("EditText value: ${view.getText()}")
	is ViewGroup -> toast("Number of children: ${view.getChildCount()} ") else -> view.visibility = View.GONE
}
{% endhighlight %}

## Range



{% highlight java %}
val cost = when(x) {
	in 1..10 -> "cheap"
	in 10..100 -> "regular"
	in 100..1000 -> "expensive"
	in specialValues -> "special value!" else -> "not rated"
}
{% endhighlight %}

## Crazy
{% highlight java %}
val res=when{
	x in 1..10 -> "cheap"
	s.contains("hello") -> "it's a welcome!"
	v is ViewGroup -> "child count: ${v.getChildCount()}" else -> ""
}
{% endhighlight %}


# Loops

## indexes:
{% highlight java %}
for (index in 0..viewGroup.getChildCount() - 1) { 
	val view = viewGroup.getChildAt(index) view.visibility = View.VISIBLE
}
{% endhighlight %}

## Array or list

```
for (i in array.indices) 
	print(array[i])
```

# while/doWhile

{% highlight java %}
while(x>0){ 
	x--
}

do{
	val y = retrieveData()
} while (y != null) // y is visible here!
{% endhighlight %}

# Ranges
This can be converted
```
if(i>=0&&i<=10) 
	println(i)
```
to:

```
if (i in 0..10) 
	println(i)
```

Ranges are **incremental** by default

This won't work
```
for (i in 10..0) 
	println(i)
```

Use `downTo`

```
for (i in 10 downTo 0)
	println(i)
```

**step**

```
for (i in 1..4 step 2) 
	println(i)
	
for (i in 4 downTo 1 step 2) 
	println(i)
```


** Crazy ways to use ranges**
```
val views = (0 until viewGroup.childCount).map { viewGroup.getChildAt(it) }
```


# Interfaces
Kotlin interfaces, on the other hand, are able to implement functions. The only difference from a class is that they **are stateless, so the properties that need a backing field will need to be overridden by the class**. The class will be in charge of saving the state of interface properties.
{% highlight java %}
interface FlyingAnimal { 
	val wings: Wings
	fun fly() = wings.move()
}

class Bird : FlyingAnimal {
	override val wings: Wings = Wings()
}

class Bat: FlyingAnimal{
	override val wings: Wings = Wings()
}

{% endhighlight %}

# Delegates

{% highlight java %}
interface CanFly {
	fun fly()
} 

class Bird(f: CanFly) : CanFly by f
{% endhighlight %}

The way an animal with wings flies is defined in another class:
{% highlight java %}
class AnimalWithWings : CanFly {
	val wings: Wings = Wings() 
	override fun fly() = wings.move()
{% endhighlight %}

So now we can create a bird that flies using wings:

{% highlight java %}
val birdWithWings = Bird(AnimalWithWings())
birdWithWings.fly()
{% endhighlight %}

 If we assume that bats always use wings, we could instantiate the object directly where we specify the delegation:
 
{% highlight java %}
class Bat : CanFly by AnimalWithWings()
 ...
val bat = Bat()
bat.fly()
 
 {% endhighlight %}

# Generics

## minimization
{% highlight java %}

class TypedClass<T>(parameter: T) { 
	val value: T = parameter
}

//you can do so
val t0 = TypedClass<String>("Hello World!")


// but it's better
val t1 = TypedClass("Hello World!")
val t2 = TypedClass(25)

// but here we need to specify type
val t3 = TypedClass<String?>(null)
{% endhighlight %}
As the third object is receiving a null reference, the type still needs to be specified because it can’t be inferred.


If we want to restrict previous class to non-nullable types, we just need to do:
{% highlight java %}
class TypedClass<T : Any>(parameter: T) {
	val value: T = parameter
}
{% endhighlight %}





{% highlight java %}
{% endhighlight %}



